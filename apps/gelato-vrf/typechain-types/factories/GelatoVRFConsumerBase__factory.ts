/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  GelatoVRFConsumerBase,
  GelatoVRFConsumerBaseInterface,
} from "../GelatoVRFConsumerBase";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "round",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "RequestedRandomness",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "randomness",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "dataWithRound",
        type: "bytes",
      },
    ],
    name: "fulfillRandomness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requestPending",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "requestedHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class GelatoVRFConsumerBase__factory {
  static readonly abi = _abi;
  static createInterface(): GelatoVRFConsumerBaseInterface {
    return new Interface(_abi) as GelatoVRFConsumerBaseInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): GelatoVRFConsumerBase {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as GelatoVRFConsumerBase;
  }
}
