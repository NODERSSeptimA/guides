/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SimpleVRFContract {
  export type RequestStruct = {
    requestTime: BigNumberish;
    requestBlock: BigNumberish;
    fulfilledTime: BigNumberish;
    fulfilledBlock: BigNumberish;
    randomness: BigNumberish;
  };

  export type RequestStructOutput = [
    requestTime: bigint,
    requestBlock: bigint,
    fulfilledTime: bigint,
    fulfilledBlock: bigint,
    randomness: bigint
  ] & {
    requestTime: bigint;
    requestBlock: bigint;
    fulfilledTime: bigint;
    fulfilledBlock: bigint;
    randomness: bigint;
  };
}

export interface SimpleVRFContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fulfillRandomness"
      | "lastRequestId"
      | "latestRandomness"
      | "nonce"
      | "requestPending"
      | "requestRandomness"
      | "requestedHash"
      | "requests"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RandomnessFulfilled"
      | "RandomnessRequested"
      | "RequestedRandomness"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "fulfillRandomness",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRandomness",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestPending",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomness",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestedHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "fulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestedHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
}

export namespace RandomnessFulfilledEvent {
  export type InputTuple = [
    nonce: BigNumberish,
    arg1: SimpleVRFContract.RequestStruct
  ];
  export type OutputTuple = [
    nonce: bigint,
    arg1: SimpleVRFContract.RequestStructOutput
  ];
  export interface OutputObject {
    nonce: bigint;
    arg1: SimpleVRFContract.RequestStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessRequestedEvent {
  export type InputTuple = [requestId: BigNumberish];
  export type OutputTuple = [requestId: bigint];
  export interface OutputObject {
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedRandomnessEvent {
  export type InputTuple = [round: BigNumberish, data: BytesLike];
  export type OutputTuple = [round: bigint, data: string];
  export interface OutputObject {
    round: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleVRFContract extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleVRFContract;
  waitForDeployment(): Promise<this>;

  interface: SimpleVRFContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fulfillRandomness: TypedContractMethod<
    [randomness: BigNumberish, dataWithRound: BytesLike],
    [void],
    "nonpayable"
  >;

  lastRequestId: TypedContractMethod<[], [bigint], "view">;

  latestRandomness: TypedContractMethod<[], [string], "view">;

  nonce: TypedContractMethod<[], [bigint], "view">;

  requestPending: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  requestRandomness: TypedContractMethod<
    [_data: BytesLike],
    [void],
    "nonpayable"
  >;

  requestedHash: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  requests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        requestTime: bigint;
        requestBlock: bigint;
        fulfilledTime: bigint;
        fulfilledBlock: bigint;
        randomness: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fulfillRandomness"
  ): TypedContractMethod<
    [randomness: BigNumberish, dataWithRound: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastRequestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestRandomness"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestPending"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "requestRandomness"
  ): TypedContractMethod<[_data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestedHash"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "requests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        requestTime: bigint;
        requestBlock: bigint;
        fulfilledTime: bigint;
        fulfilledBlock: bigint;
        randomness: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "RandomnessFulfilled"
  ): TypedContractEvent<
    RandomnessFulfilledEvent.InputTuple,
    RandomnessFulfilledEvent.OutputTuple,
    RandomnessFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessRequested"
  ): TypedContractEvent<
    RandomnessRequestedEvent.InputTuple,
    RandomnessRequestedEvent.OutputTuple,
    RandomnessRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RequestedRandomness"
  ): TypedContractEvent<
    RequestedRandomnessEvent.InputTuple,
    RequestedRandomnessEvent.OutputTuple,
    RequestedRandomnessEvent.OutputObject
  >;

  filters: {
    "RandomnessFulfilled(uint256,tuple)": TypedContractEvent<
      RandomnessFulfilledEvent.InputTuple,
      RandomnessFulfilledEvent.OutputTuple,
      RandomnessFulfilledEvent.OutputObject
    >;
    RandomnessFulfilled: TypedContractEvent<
      RandomnessFulfilledEvent.InputTuple,
      RandomnessFulfilledEvent.OutputTuple,
      RandomnessFulfilledEvent.OutputObject
    >;

    "RandomnessRequested(uint64)": TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
    RandomnessRequested: TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;

    "RequestedRandomness(uint256,bytes)": TypedContractEvent<
      RequestedRandomnessEvent.InputTuple,
      RequestedRandomnessEvent.OutputTuple,
      RequestedRandomnessEvent.OutputObject
    >;
    RequestedRandomness: TypedContractEvent<
      RequestedRandomnessEvent.InputTuple,
      RequestedRandomnessEvent.OutputTuple,
      RequestedRandomnessEvent.OutputObject
    >;
  };
}
